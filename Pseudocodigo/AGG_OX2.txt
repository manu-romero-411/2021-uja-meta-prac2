function hazGeneticoGeneracional()
	inicializaElite
	iniciaConjunto
	creaLRC
	creaPoblacionInicial
	guardarLog(-1)
	while contEV < evaluaciones do
		seleccionados <- matriz de enteros
		seleccionados = seleccion
		if(aleatorio < probCruce) do
			cruceOX2(seleccionados)
		end if
		reemplazamiento(seleccionados)
		contGen++
	end while
	guardarLog(evaluaciones - 1);
end function

function creaLRC() 
	i = 0
	while(i < longitudLRC) do
		contenido = false
		flujo = random(tamañoFlujos)
		distancia = random(tamañoDistancias)
		aux = Par(flujo, distancia)
		for j <- 0 to LRC.tamaño && !contenido do
			if(LRC[j].key == aux.key || LRC[j].value == aux.value) do
				contenido = true
			end if
		end for
		if(!contenido)
			LRC[i] = aux
			i++
		end if
	end while
end function

function creaPoblacionInicial()
	for j <- 0 to tamPoblacion do
		individuos <- vector de enteros
		for i <- 0 to longitudLRC do
			individuos[LRC[i].key] = individuos[LRC[i].value]
		end for
		for i <- 0 to conjunto.tamaño do
			if(individuos[i] == -1) do
				do
					repetido = false
					num = random(conjunto.tamaño)
					for k <- 0 to i && !repetido do
						if(num == individuos[k]) do
							repetido = true
						end if
					end for
					for k <- i+1 to conjunto.tamaño && !repetido do
						if(num == individuos[k]) do
							repetido = true
						end if
					end for
					if(!repetido) do
						individuos[i]=num
					end if
				while(individuos[i]==-1)
			end if
		end for
		contEv++
		poblacion[j]=individuos
	end for
	contGen++
	nuevaElite(poblacion)
end function

function nuevaElite(poblacion1)
	costeMin = MAX_INTEGER
	eliteIt = -1
	for i <- 0 to poblacion.tamaño do
		costeBuscado = calculaCosteConjunto(poblacion1[i])
		if(costeBuscado < costeMin) do
			eliteIt = i
			costeMin = costeBuscado
		end if
	end for
	elite = poblacion1[eliteIt]
end function

function cambiaAElite()
	indice = 0
	peorCoste = MAX_INTEGER
	for i <- 0 to poblacion.tamaño do
		contEv++
		if(peorCoste > calculaCosteConjunto(poblacion[i])) do
			indice = i
			peorCoste = calculaCosteConjunto(poblacion[i])
		end if
	end for
	poblacion[indice] = elite
end function

function calculaCosteConjunto(conjunto) -> entero
	coste <- 0
	for i <- 0 to conjunto.tamaño do
		for j <- 0 to conjunto.tamaño do
			coste += flujos[i][j] * distancias[conjunto[i]][conjunto[j]]
		end for
	end for
	return coste
end function

function seleccion() -> matriz de enteros
	nuevaElite(poblacion)
	seleccionados <- matriz de enteros
	torneos <- vector de enteros
	while(seleccionados.tamaño < vecesSeleccion) do
		do 
			torneos = generadorAleatorios(tamTorneoSeleccion, tamPoblacion)
		while(!aleatoriosBien(torneos))
		ganador = mejorTorneo(torneos)
		seleccionados.añade(ganador)
	end while
	return seleccionados
end function

function mejorTorneo(torneos) -> vector de enteros
	mejor <- vector de enteros
	for i <- 0 to conjunto.tamaño do
		mejor[i]=0
	end for
	mejorCoste = MIN_INTEGER
	for i <- 0 to torneos.tamaño do
		if(calculaCosteConjunto(poblacion[torneos[i]] > mejorCoste) do
			mejor = poblacion[torneos[i]]
			mejorCoste = calculaCosteConjunto(poblacion[torneos[i]]
		end if
	end for
	return mejor
end function

function reemplazamiento(nuevaPob)
	poblacion = nuevaPob
	estaElite = false
	for i <- 0 to poblacion.tamaño && !estaElite do
		if(poblacion[i] == elite) do
			estaElite = true
		end if
	end for
	if(!estaElite)
		cambiaAElite()
	end if
end function

function cruceOX2(seleccionados) -> matriz de enteros
	auxSel <- matriz de enteros
	for j <- 0 to seleccionados.tamaño incremento j=j+2 do
		padre1 = seleccionados[i]
		padre2 = seleccionados[i+1]
		aleatorioA <- entero
		aleatorioB <- entero
		do
			aleatorioA = random(seleccionados[i].tamaño - 2) + 1
			aleatorioB = random(seleccionados[i].tamaño - 2) + 1
		while (aleatorioA == aleatorioB)
		if(aleatorioA > aleatorioB)
			aux = aleatorioB
			aleatorioB = aleatorioA
			aleatorioA = aux
		end if
		posiciones <- lista de pares
		auxQueue1 <- vector de enteros
		auxVec1 <- vector de enteros
		auxQueue2 <- vector de enteros
		auxVec2 <- vector de enteros
		for j <- aleatorioA to aleatorioB do
			posiciones.añade(seleccionados[i][j], seleccionados[i+1][j])
		end for
		for j <- aleatorioA to aleatorioB do
			auxQueue1.añade(padre2[j])
		end for
		for j <- aleatorioA to aleatorioB do
			auxVec1[j]=auxQueue1.sacar
		end for
		for j <- aleatorioB + 1, cont <- 0 to auxVec1.tamaño - (aleatorioB - aleatorioA + 1) do
			esta = true
			for k <- 0 to auxVec1.tamaño && esta do
				if(auxVec1[k] == padre1.[j mod auxVec1.tamaño]) do
					esta = false
				end if
			end for
			if(esta) do 
				auxSel[j mod auxVec1.tamaño] = padre1 [j mod auxVec1.tamaño]
			end if
			else do
				auxQueue1.añade(padre1[j mod auxVec1.tamaño])
			end else
		end for
		while(!auxQueue1.estaVacio) do
			esta = true
			aux = 0
			for j <- 0 to padre1.tamaño && esta do
				if(padre1[j] == auxQueue1.mira) do
					aux = j
					esta = false
				end if
			end for
			if(!esta) do
				auxas = padre1[auxQueue1.sacar]
				auxVec1[aux] = auxas
			end if
		end while
		for j <- 0 to posiciones.tamaño do
			auxVec1[posiciones[j].value] = posiciones[j].key
		end for
		
		for j <- aleatorioA to aleatorioB do
			auxQueue2.añade(padre1[j])
		end for
		for j <- aleatorioA to aleatorioB do
			auxVec2[j]=auxQueue2.sacar
		end for
		for j <- aleatorioB + 1, cont <- 0 to auxVec2.tamaño - (aleatorioB - aleatorioA + 1) do
			esta = true
			for k <- 0 to auxVec2.tamaño && esta do
				if(auxVec2[k] == padre2.[j mod auxVec2.tamaño]) do
					esta = false
				end if
			end for
			if(esta) do 
				auxSel[j mod auxVec2.tamaño] = padre2[j mod auxVec2.tamaño]
			end if
			else do
				auxQueue2.añade(padre2[j mod auxVec2.tamaño])
			end else
		end for
		while(!auxQueue2.estaVacio) do
			esta = true
			aux = 0
			for j <- 0 to padre2.tamaño && esta do
				if(padre2[j] == auxQueue2.mira) do
					aux = j
					esta = false
				end if
			end for
			if(!esta) do
				auxas = padre2[auxQueue2.sacar]
				auxVec2[aux] = auxas
			end if
		end while
		for j <- 0 to posiciones.tamaño do
			auxVec2[posiciones[j].key] = posiciones[j].value
		end for
		auxSel.añade(auxVec1)
		auxSel.añade(auxVec2)
	end for
	if(aleatorio < probMutacion) do
		mutacion(auxSel)
	end if
	return auxSel
end fuction
		
function mutacion(elementoAMutar)
	for i <- 0 to elementoAMutar.tamaño do 
		pos1 <- entero
		pos2 <- entero
		do 
			pos1 = aleatorio(elementoAMutar.tamaño)
			pos2 = aleatorio(elementoAMutar.tamaño)
		while(pos1 == pos2)
		aux = elementoAMutar[i][pos1]
		elementoAMutar[i][pos2]=elementoAMutar[i][pos1]
		elementoAMutar[i][pos1]=aux
	end for
end function

function aleatoriosBien(aleatorios)
	for i <- 0 to aleatorios.tamaño do
		for j <- 0 to aleatorios.tamaño do
			if(aleatorios[i] == aleatorios[j])
				return false
			end if
		end for
	end for
	return true
end function

function generadorAleatorios(cuantos, tam)
	aleatorios <- vector de enteros
	for i <- 0 to cuantos do
		do
			repetido = false
			num = aleatorio(tam)
			for j <- 0 to i && !repetido do
				if(num == aleatorios[j])
					repetido = true
				end if
			end for
			if(!repetido)
				aleatorio[i] = num
			end if
		while(aleatorio[i] == -1)
	end for
	return aleatorios
end function